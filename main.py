import asyncio
import logging
import os
import re
import threading

from dotenv import load_dotenv
from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
)
from telethon import TelegramClient
from telethon.errors import (
    ChannelPrivateError,
    FloodWaitError,
    UserAlreadyParticipantError,
    UsernameInvalidError,
    UsernameNotOccupiedError,
)
from telethon.tl import functions

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")  # –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
API_ID = os.getenv("API_ID")  # –í–∞—à API ID –æ—Ç https://my.telegram.org
API_HASH = os.getenv("API_HASH")  # –í–∞—à API Hash –æ—Ç https://my.telegram.org
PHONE_NUMBER = os.getenv("PHONE_NUMBER")  # –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞

# –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã
if not all([BOT_TOKEN, API_ID, API_HASH, PHONE_NUMBER]):
    raise ValueError(
        "–ù–µ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (BOT_TOKEN, API_ID, API_HASH, PHONE_NUMBER) —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à .env —Ñ–∞–π–ª."
    )

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
client = None
client_loop = None


def extract_channel_username(url):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç username –∫–∞–Ω–∞–ª–∞ –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ —Å—Å—ã–ª–æ–∫"""
    patterns = [
        r"t\.me/([a-zA-Z0-9_]+)",
        r"telegram\.me/([a-zA-Z0-9_]+)",
        r"@([a-zA-Z0-9_]+)",
        r"([a-zA-Z0-9_]+)$",  # –ü—Ä–æ—Å—Ç–æ username
    ]

    for pattern in patterns:
        match = re.search(pattern, url.strip())
        if match:
            username = match.group(1)
            # –£–±–∏—Ä–∞–µ–º @ –µ—Å–ª–∏ –µ—Å—Ç—å
            return username.lstrip("@")

    return None


def run_telethon_client():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç Telethon –∫–ª–∏–µ–Ω—Ç –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    global client, client_loop

    client_loop = asyncio.new_event_loop()
    asyncio.set_event_loop(client_loop)

    client = TelegramClient("session_name", API_ID, API_HASH)

    async def start_client():
        await client.start(phone=PHONE_NUMBER)
        logger.info("Telethon client started successfully")
        # –î–µ—Ä–∂–∏–º –∫–ª–∏–µ–Ω—Ç –∞–∫—Ç–∏–≤–Ω—ã–º
        await client.run_until_disconnected()

    try:
        client_loop.run_until_complete(start_client())
    except Exception as e:
        logger.error(f"Error in Telethon client: {e}")
    finally:
        client_loop.close()


async def subscribe_to_channel(username):
    """–ü–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –∫–∞–Ω–∞–ª –ø–æ username"""
    global client, client_loop

    if not client or not client_loop:
        return False, "–ö–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"

    try:
        # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é –≤ —Ü–∏–∫–ª–µ —Å–æ–±—ã—Ç–∏–π –∫–ª–∏–µ–Ω—Ç–∞
        future = asyncio.run_coroutine_threadsafe(
            _subscribe_to_channel_async(username), client_loop
        )
        return future.result(timeout=30)  # –ñ–¥–µ–º –º–∞–∫—Å–∏–º—É–º 30 —Å–µ–∫—É–Ω–¥

    except Exception as e:
        return False, f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {str(e)}"


async def _subscribe_to_channel_async(username):
    """–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
        entity = await client.get_entity(username)

        # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∫–∞–Ω–∞–ª
        await client(functions.channels.JoinChannelRequest(entity))

        return True, f"–£—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ –∫–∞–Ω–∞–ª: {entity.title}"

    except UserAlreadyParticipantError:
        return True, "–£–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª"

    except ChannelPrivateError:
        return False, "–ö–∞–Ω–∞–ª –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"

    except UsernameNotOccupiedError:
        return False, "–ö–∞–Ω–∞–ª —Å —Ç–∞–∫–∏–º username –Ω–µ –Ω–∞–π–¥–µ–Ω"

    except UsernameInvalidError:
        return False, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç username –∫–∞–Ω–∞–ª–∞"

    except FloodWaitError as e:
        return False, f"–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ {e.seconds} —Å–µ–∫—É–Ω–¥"

    except Exception as e:
        return False, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}"


async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    welcome_message = """
ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ Telegram –∫–∞–Ω–∞–ª—ã.

üìù –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:
1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø—É–±–ª–∏—á–Ω—ã–π Telegram –∫–∞–Ω–∞–ª
2. –Ø –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–ø–∏—à—É –≤–∞—à —Å–µ—Ä–≤–∏—Å–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –Ω–∞ —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª

üìã –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Å—Å—ã–ª–æ–∫:
‚Ä¢ https://t.me/channel_name
‚Ä¢ https://telegram.me/channel_name
‚Ä¢ @channel_name
‚Ä¢ channel_name

‚ö†Ô∏è –í–∞–∂–Ω–æ: –†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å –ø—É–±–ª–∏—á–Ω—ã–º–∏ –∫–∞–Ω–∞–ª–∞–º–∏!
    """
    await update.message.reply_text(welcome_message)


async def handle_channel_link(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Å—ã–ª–æ–∫ –Ω–∞ –∫–∞–Ω–∞–ª—ã"""
    message_text = update.message.text
    user_id = update.message.from_user.id

    # –ò–∑–≤–ª–µ–∫–∞–µ–º username –∫–∞–Ω–∞–ª–∞
    channel_username = extract_channel_username(message_text)

    if not channel_username:
        await update.message.reply_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É."
        )
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    processing_message = await update.message.reply_text(
        f"‚è≥ –ü—ã—Ç–∞—é—Å—å –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª: @{channel_username}..."
    )

    try:
        # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∫–∞–Ω–∞–ª
        success, result_message = await subscribe_to_channel(channel_username)

        if success:
            await processing_message.edit_text(f"‚úÖ {result_message}")
            logger.info(
                f"User {user_id} successfully subscribed to @{channel_username}"
            )
        else:
            await processing_message.edit_text(f"‚ùå {result_message}")
            logger.warning(
                f"Failed to subscribe user {user_id} to @{channel_username}: {result_message}"
            )

    except Exception as e:
        error_message = f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}"
        await processing_message.edit_text(error_message)
        logger.error(f"Unexpected error for user {user_id}: {str(e)}")


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_message = """
üÜò –ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:

üìã –ö–æ–º–∞–Ω–¥—ã:
/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–æ—â–∏

üîó –ö–∞–∫ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª:
1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø—É–±–ª–∏—á–Ω—ã–π Telegram –∫–∞–Ω–∞–ª
2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—ë –º–Ω–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
3. –î–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏

üìù –ü—Ä–∏–º–µ—Ä—ã —Å—Å—ã–ª–æ–∫:
‚Ä¢ https://t.me/durov
‚Ä¢ @durov
‚Ä¢ durov

‚ö†Ô∏è –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:
- –†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å –ø—É–±–ª–∏—á–Ω—ã–º–∏ –∫–∞–Ω–∞–ª–∞–º–∏
- –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ø—Ä–∏–≤–∞—Ç–Ω—ã–º–∏ –∫–∞–Ω–∞–ª–∞–º–∏ –∏ –≥—Ä—É–ø–ø–∞–º–∏
- –°–æ–±–ª—é–¥–∞–π—Ç–µ –ª–∏–º–∏—Ç—ã Telegram API
    """
    await update.message.reply_text(help_message)


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º Telethon –∫–ª–∏–µ–Ω—Ç –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        telethon_thread = threading.Thread(target=run_telethon_client, daemon=True)
        telethon_thread.start()

        # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ, —á—Ç–æ–±—ã –∫–ª–∏–µ–Ω—Ç —É—Å–ø–µ–ª –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è
        import time

        time.sleep(3)

        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±–æ—Ç–∞
        application = Application.builder().token(BOT_TOKEN).build()

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        application.add_handler(CommandHandler("start", start_command))
        application.add_handler(CommandHandler("help", help_command))

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (—Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª—ã)
        application.add_handler(
            MessageHandler(filters.TEXT & ~filters.COMMAND, handle_channel_link)
        )

        logger.info("Bot is starting...")

        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        application.run_polling(drop_pending_updates=True)

    except KeyboardInterrupt:
        logger.info("Bot stopped by user")
    except Exception as e:
        logger.error(f"Error starting bot: {e}")
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫–ª–∏–µ–Ω—Ç
        if client and client_loop:
            try:
                asyncio.run_coroutine_threadsafe(client.disconnect(), client_loop)
            except:
                pass


if __name__ == "__main__":
    main()
